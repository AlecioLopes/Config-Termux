#!/data/data/com.termux/files/usr/bin/bash

# Cores para melhor visualização
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
NC='\033[0m' # No Color

# Configurações
REPO_URL="https://github.com/AlecioLopes/Config-Termux.git"
INSTALL_DIR="$HOME/termux-config"
LOCK_FILE="$INSTALL_DIR/.install.lock"
LOG_FILE="$INSTALL_DIR/install.log"
SCRIPT_NAME="ConfigGeralTermux"

# Função para registro de log
log() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

# Função para verificar instalação prévia
check_previous_install() {
    if [ -f "$LOCK_FILE" ]; then
        log "ℹ️  Configuração já foi executada anteriormente em: $(cat "$LOCK_FILE")"
        read -p "Deseja executar novamente? (s/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Ss]$ ]]; then
            log "✅ Execução cancelada pelo usuário"
            exit 0
        fi
    fi
}

# Função para exibir cabeçalho
header() {
    clear
    echo -e "${CYAN}"
    echo "===================================="
    echo "  CONFIGURAÇÃO COMPLETA DO TERMUX   "
    echo "  (Versão GitHub)                  "
    echo "===================================="
    echo -e "${NC}"
    
    # Criar diretório de instalação se não existir
    mkdir -p "$INSTALL_DIR"
}

# Função para verificar e instalar dependências
check_dependencies() {
    log "Verificando dependências..."
    
    local missing=0
    local required=("git" "curl" "wget")
    
    for pkg in "${required[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            log "${BLUE}[-] $pkg não encontrado. Instalando...${NC}"
            if ! pkg install -y "$pkg"; then
                log "${RED}[!] Falha ao instalar $pkg${NC}"
                missing=$((missing+1))
            fi
        fi
    done
    
    if [ $missing -gt 0 ]; then
        log "${RED}[!] Falha ao instalar dependências necessárias${NC}"
        exit 1
    fi
    
    log "${GREEN}[+] Dependências verificadas${NC}"
}

# Função para clonar/atualizar repositório
clone_repo() {
    log "Clonando/atualizando repositório..."
    
    if [ -d "$INSTALL_DIR/.git" ]; then
        log "${BLUE}[-] Diretório já existe. Atualizando...${NC}"
        if ! git -C "$INSTALL_DIR" pull; then
            log "${RED}[!] Erro ao atualizar repositório${NC}"
            exit 1
        fi
    else
        if ! git clone "$REPO_URL" "$INSTALL_DIR"; then
            log "${RED}[!] Erro ao clonar repositório${NC}"
            exit 1
        fi
    fi
    
    log "${GREEN}[+] Repositório atualizado com sucesso${NC}"
}

# Função para executar scripts
run_scripts() {
    cd "$INSTALL_DIR" || {
        log "${RED}[!] Falha ao acessar diretório de instalação${NC}"
        exit 1
    }
    
    local main_script="ConfigGeralTermux"
    
    if [ -f "$main_script" ]; then
        log "Executando script principal..."
        chmod +x "$main_script"
        if ! ./"$main_script"; then
            log "${RED}[!] Erro durante execução do script principal${NC}"
            exit 1
        fi
    else
        log "${RED}[!] Script principal não encontrado${NC}"
        exit 1
    fi
    
    # Marcar instalação como concluída
    date > "$LOCK_FILE"
}

# Função principal
main() {
    header
    check_previous_install
    check_dependencies
    clone_repo
    run_scripts
    
    echo -e "${GREEN}"
    echo "===================================="
    echo "  CONFIGURAÇÃO CONCLUÍDA COM SUCESSO"
    echo "===================================="
    echo -e "${NC}"
    
    log "✅ Instalação concluída com sucesso"
    echo -e "${YELLOW}[!] Recomenda-se reiniciar o Termux para aplicar todas as alterações.${NC}"
    echo -e "${BLUE}Log completo disponível em: $LOG_FILE${NC}"
}

# Executar função principal
main "$@"
