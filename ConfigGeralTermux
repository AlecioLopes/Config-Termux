#!/data/data/com.termux/files/usr/bin/bash

# Script seguro para configuração do Termux
# URL segura: https://raw.githubusercontent.com/AlecioLopes/Config-Termux/main/ConfigGeralTermux

# Modo seguro: sair imediatamente em caso de erro
set -euo pipefail

# Configurações seguras
readonly TMP_DIR="/data/data/com.termux/files/usr/tmp/termux_config_$(date +%s)"
readonly LOG_FILE="$HOME/termux_config_$(date +%Y%m%d).log"
readonly LOCK_FILE="$HOME/.termux_config_lock"
readonly REQUIRED_PKGS=("git" "curl" "wget" "nano" "proot-distro" "termux-api" "openssh")

# Cores (desativadas se não for terminal)
if [ -t 1 ]; then
    RED='\033[1;31m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[1;34m'
    CYAN='\033[1;36m'
    NC='\033[0m'
else
    RED=''; GREEN=''; YELLOW=''; BLUE=''; CYAN=''; NC=''
fi

# Função de log segura
log() {
    local message="$1"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${YELLOW}[${timestamp}] ${message}${NC}" | tee -a "$LOG_FILE"
}

# Função para limpeza segura
cleanup() {
    if [ -d "$TMP_DIR" ]; then
        rm -rf "$TMP_DIR" || log "${RED}Falha ao limpar diretório temporário${NC}"
    fi
    log "Limpeza concluída"
}

# Tratamento de sinais
trap cleanup EXIT INT TERM

# Verificação segura de instalação prévia
check_previous_install() {
    if [ -f "$LOCK_FILE" ]; then
        log "${CYAN}Configuração já foi executada anteriormente em: $(cat "$LOCK_FILE")${NC}"
        read -rp "Deseja executar novamente? (s/N) " -n 1
        echo
        if [[ ! "$REPLY" =~ ^[Ss]$ ]]; then
            log "${GREEN}Execução cancelada pelo usuário${NC}"
            exit 0
        fi
    fi
}

# Verificação de dependências segura
check_dependencies() {
    log "${BLUE}Verificando dependências...${NC}"
    
    local missing=0
    for pkg in "${REQUIRED_PKGS[@]}"; do
        if ! pkg show "$pkg" &> /dev/null; then
            log "${YELLOW}Pacote $pkg não encontrado${NC}"
            missing=1
        fi
    done
    
    if [ "$missing" -eq 1 ]; then
        log "${CYAN}Instalando pacotes necessários...${NC}"
        if ! pkg update -y && pkg install -y "${REQUIRED_PKGS[@]}"; then
            log "${RED}Falha crítica ao instalar dependências${NC}"
            exit 1
        fi
    fi
    
    log "${GREEN}Todas dependências estão instaladas${NC}"
}

# Configuração de permissões segura
setup_storage() {
    if [ ! -d "$HOME/storage" ]; then
        log "${BLUE}Solicitando permissão de armazenamento...${NC}"
        if ! termux-setup-storage; then
            log "${YELLOW}Permissão de armazenamento negada - continuando sem acesso${NC}"
        else
            log "${GREEN}Permissão de armazenamento concedida${NC}"
        fi
    fi
}

# Atualização segura do sistema
update_system() {
    log "${CYAN}Atualizando pacotes...${NC}"
    if ! pkg update -y && pkg upgrade -y; then
        log "${YELLOW}Falha na atualização completa - continuando com versões atuais${NC}"
    else
        log "${GREEN}Sistema atualizado com sucesso${NC}"
    fi
}

# Configuração segura do ambiente
setup_environment() {
    local termux_props="$HOME/.termux/termux.properties"
    
    log "${BLUE}Configurando ambiente...${NC}"
    
    mkdir -p "$HOME/.termux"
    if [ ! -f "$termux_props" ]; then
        cat > "$termux_props" << 'EOL'
extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]
EOL
        log "${GREEN}Teclas extras configuradas${NC}"
    fi
    
    # Configurações seguras do .bashrc
    if ! grep -q "alias ll='ls -l'" "$HOME/.bashrc"; then
        cat >> "$HOME/.bashrc" << 'EOL'
# Aliases seguros
alias ll='ls -l'
alias la='ls -la'
alias update='pkg update && pkg upgrade'
EOL
        log "${GREEN}Aliases configurados${NC}"
    fi
    
    termux-reload-settings
}

# Função principal segura
main() {
    echo -e "${CYAN}"
    echo "===================================="
    echo "  CONFIGURAÇÃO SEGURA DO TERMUX     "
    echo "  Versão: 2.0 (Robusta)            "
    echo "===================================="
    echo -e "${NC}"
    
    # Criar diretório temporário seguro
    mkdir -p "$TMP_DIR"
    
    check_previous_install
    check_dependencies
    setup_storage
    update_system
    setup_environment
    
    # Marcar como concluído
    date > "$LOCK_FILE"
    
    echo -e "${GREEN}"
    echo "===================================="
    echo "  CONFIGURAÇÃO CONCLUÍDA COM SUCESSO"
    echo "  Log completo em: $LOG_FILE        "
    echo "===================================="
    echo -e "${NC}"
    
    log "${GREEN}Configuração finalizada com sucesso${NC}"
}

# Execução segura
if [ "$(id -u)" -eq 0 ]; then
    echo -e "${RED}Não execute como root!${NC}" >&2
    exit 1
fi

main "$@"
